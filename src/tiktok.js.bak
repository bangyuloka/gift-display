const { WebcastPushConnection } = require('tiktok-live-connector');
const { filterGift } = require('./anti-spam');
const fs = require('fs');
const path = require('path');

let tiktok = null;
let giftCallback = () => {};

const cachePath = path.join(__dirname, 'gift-cache.json');
const giftCache = fs.existsSync(cachePath) ? JSON.parse(fs.readFileSync(cachePath)) : {};

function onGift(callback) {
  giftCallback = callback;
}

async function connect(username) {
  if (tiktok) {
    try {
      await tiktok.disconnect();
    } catch (_) {}
  }

  tiktok = new WebcastPushConnection(username);

  tiktok.on('gift', data => {
    console.log("üè∑Ô∏è giftId:", data.giftId, "| giftType:", data.giftName);
    console.log("üéÅ Full gift data:", JSON.stringify(data, null, 2));

    if (data.giftType === 1 && !data.repeatEnd) return;

    let diamondValue = giftCache[data.giftId];
    data.diamondCount = diamondValue || 1;

    if (!filterGift(data)) return;

    if (diamondValue === undefined) {
      console.log("‚ö†Ô∏è Unknown giftId:", data.giftId, "‚Üí fallback to 1 coin");
    }

    // Kirim data gift ke client
    giftCallback({
      user: {
        uniqueId: data.uniqueId || 'unknown',
        nickname: data.nickname || 'anonymous',
        profilePictureUrl: data.profilePictureUrl || '',
        giftType: data.giftName || data.gift?.name || 'Unknown',
        diamondCount: data.diamondCount
      }
    });
  });

  await tiktok.connect();
}

module.exports = { onGift, connect };
